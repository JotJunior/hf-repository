<?php

declare(strict_types=1);

namespace {{namespace}};

use App\Controller\AbstractController;
use Jot\HfOAuth2\Entity\{{class_name}}\{{class_name}};
use App\Repository\{{class_name}}Repository;
use Hyperf\Di\Annotation\Inject;
use Hyperf\HttpServer\Annotation\Controller;
use Hyperf\HttpServer\Annotation\RequestMapping;
use Hyperf\RateLimit\Annotation\RateLimit;
use Hyperf\Swagger\Annotation as SA;
use Psr\Http\Message\ResponseInterface as PsrResponseInterface;

#[SA\HyperfServer('http')]
#[SA\Tag(
    name: '{{class_name}}',
    description: 'Endpoints related to {{service_name}} management'
)]
#[SA\Schema(schema: "app.error.response", required: ["result", "error"],
    properties: [
        new SA\Property(property: "result", type: "string", example: "error"),
        new SA\Property(property: "error", type: "string", example: "Error message"),
        new SA\Property(property: "data", type: "string|array", example: null),
    ],
    type: "object"
)]
#[Controller(prefix: '/{{api_version}}')]
class {{class_name}}Controller extends AbstractController
{

    #[Inject]
    protected {{class_name}}Repository $repository;

    #[SA\Get(
        path: "/{{api_version}}/{{service_name}}",
        description: "Retrieve a list of {{service_name}} with optional pagination.",
        summary: "Get {{class_name}}s List",
        tags: ["{{class_name}}"],
        parameters: [
            new SA\Parameter(
                name: "_page",
                description: "Page number for pagination",
                in: "query",
                required: false,
                schema: new SA\Schema(type: "integer", example: 1)
            ),
            new SA\Parameter(
                name: "_per_page",
                description: "Number of results per page",
                in: "query",
                required: false,
                schema: new SA\Schema(type: "integer", example: 10)
            ),
            new SA\Parameter(
                name: "_sort",
                description: "Sort results by a specific fields",
                in: "query",
                required: false,
                schema: new SA\Schema(type: "string", example: "created_at:desc,updated_at:desc")
            ),
            new SA\Parameter(
                name: "_fields",
                description: "Fields to include in the response",
                in: "query",
                required: false,
                schema: new SA\Schema(type: "string", example: "id,created_at,updated_at")
            )
        ],
        responses: [
            new SA\Response(
                response: 200,
                description: "{{class_name}} details retrieved successfully",
                content: new SA\JsonContent(
                    properties: [
                        new SA\Property(
                            property: "data",
                            type: "array",
                            items: new SA\Items(ref: "#/components/schemas/app.entity.{{schema_name}}.{{schema_name}}")
                        ),
                        new SA\Property(
                            property: "result",
                            type: "string",
                            example: "success"
                        ),
                        new SA\Property(
                            property: "error",
                            type: "string",
                            example: null,
                            nullable: true
                        )
                    ],
                    type: "object"
                )
            ),
            new SA\Response(
                response: 400,
                description: "Bad Request",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            ),
            new SA\Response(
                response: 500,
                description: "Application error",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            )
        ]
    )]
    #[RateLimit(create: 10, consume: 1)]
    public function get{{class_name}}sList(): PsrResponseInterface
    {
        $result = $this->repository->paginate($this->request->query());
        if ($result['result'] === 'error') {
            return $this->response->withStatus(400)->json($result);
        }
        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '*')
            ->json($result);

    }

    #[SA\Get(
        path: "/{{api_version}}/{{service_name}}/{id}",
        description: "Retrieve the details of a specific {{service_name}} identified by ID.",
        summary: "Get {{class_name}} Data",
        tags: ["{{class_name}}"],
        parameters: [
            new SA\Parameter(
                name: "id",
                description: "Unique identifier of the {{service_name}}",
                in: "path",
                required: true,
                schema: new SA\Schema(type: "string", example: "12345")
            )
        ],
        responses: [
            new SA\Response(
                response: 200,
                description: "{{class_name}} details retrieved successfully",
                content: new SA\JsonContent(
                    properties: [
                        new SA\Property(
                            property: "data",
                            ref: "#/components/schemas/app.entity.{{schema_name}}.{{schema_name}}"
                        ),
                        new SA\Property(
                            property: "result",
                            type: "string",
                            example: "success"
                        ),
                        new SA\Property(
                            property: "error",
                            type: "string",
                            example: "Invalid request parameters",
                            nullable: true
                        )
                    ],
                    type: "object"
                )
            ),
            new SA\Response(
                response: 400,
                description: "Server Error",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            ),
            new SA\Response(
                response: 404,
                description: "{{class_name}} not Found",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            ),
            new SA\Response(
                response: 500,
                description: "Application error",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            )
        ]
    )]
    #[RateLimit(create: 10, consume: 1)]
    public function get{{class_name}}Data(string $id): PsrResponseInterface
    {
        $entity = $this->repository->find($id);

        if (empty($entity)) {
            return $this->response->withStatus(404)->json([
                'data' => null,
                'result' => 'not-found',
                'error' => 'Document not found'
            ]);
        }

        return $this->response->json([
            'data' => $entity->toArray(),
            'result' => 'success',
            'error' => null,
        ]);
    }

    #[SA\Post(
        path: "/{{api_version}}/{{service_name}}",
        description: "Create a new {{service_name}}.",
        summary: "Create a New {{class_name}}",
        requestBody: new SA\RequestBody(
            required: true,
            content: new SA\JsonContent(ref: "#/components/schemas/app.entity.{{schema_name}}.{{schema_name}}")
        ),
        tags: ["{{class_name}}"],
        responses: [
            new SA\Response(
                response: 201,
                description: "{{class_name}} created",
                content: new SA\JsonContent(ref: "#/components/schemas/app.entity.{{schema_name}}.{{schema_name}}")
            ),
            new SA\Response(
                response: 400,
                description: "Bad request",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            ),
            new SA\Response(
                response: 500,
                description: "Application error",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            )
        ]
    )]
    #[RateLimit(create: 10, consume: 2)]
    public function create{{class_name}}(): PsrResponseInterface
    {
        $entity = new {{class_name}}($this->request->all());

        try {
            $response = $this->repository->create($entity);
        } catch (\Throwable $e) {
            return $this->response->withStatus(400)->json([
                'data' => null,
                'result' => 'error',
                'error' => $e->getMessage()
            ]);
        }

        return $this->response->withStatus(201)->json([
            'data' => $response->toArray(),
            'result' => 'success',
            'error' => null,
        ]);
    }

    #[SA\Put(
        path: "/{{api_version}}/{{service_name}}/{id}",
        description: "Update the details of an existing {{service_name}}.",
        summary: "Update an existing {{class_name}}",
        requestBody: new SA\RequestBody(
            required: true,
            content: new SA\JsonContent(ref: "#/components/schemas/app.entity.{{schema_name}}.{{schema_name}}")
        ),
        tags: ["{{class_name}}"],
        parameters: [
            new SA\Parameter(
                name: "id",
                description: "Unique identifier of the {{service_name}}",
                in: "path",
                required: true,
                schema: new SA\Schema(type: "string", example: "12345")
            )
        ],
        responses: [
            new SA\Response(
                response: 200,
                description: "{{class_name}} Updated",
                content: new SA\JsonContent(ref: "#/components/schemas/app.entity.{{schema_name}}.{{schema_name}}")
            ),
            new SA\Response(
                response: 400,
                description: "Bad Request",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            ),
            new SA\Response(
                response: 404,
                description: "{{class_name}} Not Found",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            ),
            new SA\Response(
                response: 500,
                description: "Application error",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            )
        ]
    )]
    #[RateLimit(create: 10, consume: 5)]
    public function update{{class_name}}(string $id): PsrResponseInterface
    {
        $entity = new {{class_name}}(['id' => $id, ...$this->request->all()]);

        try {
            $response = $this->repository->update($entity);
        } catch (\Throwable $e) {
            return $this->response->withStatus(400)->json([
                'data' => null,
                'result' => 'error',
                'error' => $e->getMessage()
            ]);
        }

        return $this->response->json([
            'data' => $response->toArray(),
            'result' => 'success',
            'error' => null,
        ]);
    }

    #[SA\Delete(
        path: "/{{api_version}}/{{service_name}}/{id}",
        description: "Delete an existing {{service_name}} by its unique identifier.",
        summary: "Delete an existing {{class_name}}",
        tags: ["{{class_name}}"],
        parameters: [
            new SA\Parameter(
                name: "id",
                description: "Unique identifier of the {{service_name}}",
                in: "path",
                required: true,
                schema: new SA\Schema(type: "string", example: "12345")
            )
        ],
        responses: [
            new SA\Response(
                response: 200,
                description: "{{class_name}} Deleted",
                content: new SA\JsonContent(
                    properties: [
                        new SA\Property(
                            property: "data",
                            type: "string",
                            nullable: true
                        ),
                        new SA\Property(
                            property: "result",
                            type: "string",
                            example: "success"
                        ),
                        new SA\Property(
                            property: "error",
                            type: "string",
                            example: "{{class_name}} not found",
                            nullable: true
                        )
                    ],
                    type: "object"
                )
            ),
            new SA\Response(
                response: 400,
                description: "Bad Request",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            ),
            new SA\Response(
                response: 404,
                description: "{{class_name}} Not Found",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            ),
            new SA\Response(
                response: 500,
                description: "Application error",
                content: new SA\JsonContent(ref: "#/components/schemas/app.error.response")
            )
        ]
    )]
    #[RateLimit(create: 1, consume: 1)]
    public function delete{{class_name}}(string $id): PsrResponseInterface
    {
        return $this->response->json([
            'data' => null,
            'result' => $this->repository->delete($id) ? 'success' : 'error',
            'error' => null,
        ]);
    }

    #[SA\Head(
        path: "/{{api_version}}/{{service_name}}/{id}",
        description: "Check if a valid {{service_name}} exists by its unique identifier.",
        summary: "Check {{service_name}}",
        tags: ["{{class_name}}"],
        parameters: [
            new SA\Parameter(
                name: "id",
                description: "Unique identifier of the {{service_name}}",
                in: "path",
                required: true,
                schema: new SA\Schema(type: "string", example: "abc1234")
            )
        ],
        responses: [
            new SA\Response(
                response: 204,
                description: "{{class_name}} found",
                content: null
            ),
            new SA\Response(
                response: 404,
                description: "{{class_name}} not Found",
                content: null
            )
        ]
    )]
    #[RateLimit(create: 10, consume: 1)]
    public function check{{class_name}}(string $id): PsrResponseInterface
    {
        return $this->response->withStatus($this->repository->exists($id) ? 204 : 404)->raw('');
    }

    #[RequestMapping(path: "/{{api_version}}/{{service_name}}[/[{id}]]", methods: ['OPTIONS'])]
    #[RateLimit(create: 10, consume: 1)]
    public function requestOptions(): PsrResponseInterface
    {
        return $this->response
            ->withHeader("Access-Control-Allow-Origin", "*")
            ->json([
                'methods' => ['GET', 'POST', 'PUT', 'DELETE', 'HEAD'],
                'rate_limit' => 'Max 10 requests per second.'
            ]);
    }

}
